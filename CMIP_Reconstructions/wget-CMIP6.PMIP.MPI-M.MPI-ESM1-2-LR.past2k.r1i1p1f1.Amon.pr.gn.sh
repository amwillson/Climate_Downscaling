#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by esgf-data.dkrz.de - 2022/12/13 21:30:33
# Search URL: http://esgf-data.dkrz.de/esg-search/wget/?distrib=false&dataset_id=CMIP6.PMIP.MPI-M.MPI-ESM1-2-LR.past2k.r1i1p1f1.Amon.pr.gn.v20210714|esgf3.dkrz.de
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='http://esgf-data.dkrz.de/esg-search/wget/?distrib=false&dataset_id=CMIP6.PMIP.MPI-M.MPI-ESM1-2-LR.past2k.r1i1p1f1.Amon.pr.gn.v20210714|esgf3.dkrz.de'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_700101-702012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_700101-702012.nc' 'SHA256' 'fe28fdbdfe5549320b4f39aced06116b87383e9d6e0c15f31f2606e5dd9f1841'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_702101-704012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_702101-704012.nc' 'SHA256' '3d3da7a9b83f357f14662a3e0bdc03f130b296dce014fe97c3ad2c897efc7e28'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_704101-706012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_704101-706012.nc' 'SHA256' '9af9ee2bd596330241014793003f8a78e07025390695dbe826050e6c56da771a'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_706101-708012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_706101-708012.nc' 'SHA256' '159de4bec5f7f44b6b20fe27bc146f2bc18c857cd7931f15fae5ddf75eb4aa2d'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_708101-710012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_708101-710012.nc' 'SHA256' '974de7492e5e04a2bea9974d127eec1efdf13c8a12a5952530f533b8e9fd6aad'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_710101-712012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_710101-712012.nc' 'SHA256' '1ed00bd3ae6b8325cf580876abc851e676e33057ffbf021367c128b003825edf'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_712101-714012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_712101-714012.nc' 'SHA256' '2f81d2434a1bf6e8e15a174f464aee783c1b6c3a88e5c6c0b4b3eadd934a63a2'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_714101-716012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_714101-716012.nc' 'SHA256' '2173eb30ae972cfb04284910605316003f95d0b9ac75cc8c6712a4db66aa4de7'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_716101-718012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_716101-718012.nc' 'SHA256' 'e43d325501a8bc1b17860afa33c9a3eb3f1b8a8e36c6ebb0629d6d03e903d51a'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_718101-720012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_718101-720012.nc' 'SHA256' 'd948562c8202f3aad86a1741bd2e37b6e06dc3cc8e061e372503f3b62e3dc244'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_720101-722012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_720101-722012.nc' 'SHA256' '807e547307e556cc1ae2ed7d84b563c089ab0e0d449d406fc6865539d1cbebdc'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_722101-724012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_722101-724012.nc' 'SHA256' 'c5aa54552821f54ac492d1a8819ffeafa38cab81f016bafcc457bddff5144dc9'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_724101-726012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_724101-726012.nc' 'SHA256' 'ce952162013a43b7fa03d8422744a9b0834f973c8fb1d671d8c14bef0a5f25aa'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_726101-728012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_726101-728012.nc' 'SHA256' '41853e53388d126c0bc93dfd6b73721a94b057901e3c5587b58cb075d062fd00'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_728101-730012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_728101-730012.nc' 'SHA256' 'ca52b15ce4e931310455775b22c14f0ab011e30784e1310d8403afee20fbdc11'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_730101-732012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_730101-732012.nc' 'SHA256' 'b1bee4041296183478720bb6d3482b1a7f2e42c44e1bd11bca0527d684791564'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_732101-734012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_732101-734012.nc' 'SHA256' '616fb5d20eec110575781bb1b436d23d015fc37df5651e7532b492798a92f570'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_734101-736012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_734101-736012.nc' 'SHA256' '8fee0101fddf5f63558628956cd134a2f4080ac522deca62a8eb4339c2aaa461'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_736101-738012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_736101-738012.nc' 'SHA256' 'dff10184034dd5ff61661d3206214414644b76ad567d24c0486a4dc189bc241d'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_738101-740012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_738101-740012.nc' 'SHA256' 'aeb9bc410d9ad94c5f60edf995218070a8464eaf9e38fdd5f532300d49919047'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_740101-742012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_740101-742012.nc' 'SHA256' 'e1c6e9d1945927cd6fa07c99a309a50a0d09d66e5b174fa038bc2fda94d64d19'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_742101-744012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_742101-744012.nc' 'SHA256' 'faf02466faa7c32ef6a319a602b1e28e371114e7fce5359783d3239c1818cb0c'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_744101-746012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_744101-746012.nc' 'SHA256' 'e6f3790cabacf82876ddea802afab7e4bf2bc7a88444a2f98e15618665fb01a9'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_746101-748012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_746101-748012.nc' 'SHA256' 'a77cf2de85eb127de16b21996f229d072e352811483b1616fe8db6e090a2a337'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_748101-750012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_748101-750012.nc' 'SHA256' '562035d52336e3efa2db6235ca8e43b21bd369fcb05d6b905e3b96c429850cad'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_750101-752012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_750101-752012.nc' 'SHA256' 'ca7172910c3fe1986b372b53f17e8fbb8d186c79407af853112e6e08b178f4c8'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_752101-754012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_752101-754012.nc' 'SHA256' '9da6365cad5b3efd4b9c8502aac43c4f0122bf896630ce4c3a09f3b6b107a70e'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_754101-756012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_754101-756012.nc' 'SHA256' 'fb5ef96f2cc00d2b467c507d1cee0d64804d2f99b86d5b5d4d0b861c15172d90'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_756101-758012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_756101-758012.nc' 'SHA256' '588e6de71c2a35ec6804c1b4d84e8e3cacd3e48dbc57ad2a19ac4b5a1953fc76'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_758101-760012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_758101-760012.nc' 'SHA256' '73b1772670cff1a5f2ace25e2c49f0cb688206126a30216c0c53efbee4bc44eb'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_760101-762012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_760101-762012.nc' 'SHA256' '980a73e7d24707e008117cba27b8bfa51810771972b7f7b6655a64e54bef4036'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_762101-764012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_762101-764012.nc' 'SHA256' 'e6b4d58750df27569b1f38509e450364dc2978b927c9bd69094cc70dd2e8f1b2'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_764101-766012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_764101-766012.nc' 'SHA256' '9c172252cf2366da39a18858c19ca3919ab524f9ebc38dcd60a46c5c6ba80ac3'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_766101-768012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_766101-768012.nc' 'SHA256' '4217f9648e22083135a9f29f569cb6a913bad794ba566f4e8147fb7053bc924e'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_768101-770012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_768101-770012.nc' 'SHA256' '2e07ba283792d676eea418f29e51f9cb8d130a3fe7a2e257725a71cda590443d'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_770101-772012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_770101-772012.nc' 'SHA256' 'e1ad4c92388794530c4652bc0486ab92434fe0a6522c497c48f9d18209b55546'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_772101-774012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_772101-774012.nc' 'SHA256' 'a549a47bce91a2ec29c6eb7996401406b6fbbc8f1f67fa686f29cbb0ffe62dfc'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_774101-776012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_774101-776012.nc' 'SHA256' '673838ea2a58bddbc8a70c5dfdc6995e4766752fb2eb2bffe176fe71ea9d3346'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_776101-778012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_776101-778012.nc' 'SHA256' '72db7379b23714c7ebd1908536aeacf3dbcb9e39d182fc6f1cd235b460c193ab'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_778101-780012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_778101-780012.nc' 'SHA256' 'd6e9010073bd93e14b3fc9bb1d74c7a9f74d7bd38ecb6e8f41fc1027aee2b790'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_780101-782012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_780101-782012.nc' 'SHA256' '307f762ccfcbfb88fa3280e5a3d6b1e6c630d8d0617d401bf5a4a86e8d9bcb1d'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_782101-784012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_782101-784012.nc' 'SHA256' 'efc8ccb181bc9ef3f9f179e66b4e3f70e847a77924a84f868b83cae3008ae764'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_784101-785012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_784101-785012.nc' 'SHA256' 'd0412742a72105d795e730511ef52d787c89d10446b5f5e91bb9bcb57fcaea2b'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_785101-787012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_785101-787012.nc' 'SHA256' 'a08c1e0a0c5271a13714c8c2e12d557efa482dd445c5b12da9471a25fe055ee7'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_787101-789012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_787101-789012.nc' 'SHA256' '360442d5d37c7490d808eb9428a6c1a585b08c069e54bc74610d74af1b79d848'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_789101-791012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_789101-791012.nc' 'SHA256' '3af9d3d52eed62b7f3cabc7c9700d0c4d70ceaa8e8c23745f3549c2f87174676'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_791101-793012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_791101-793012.nc' 'SHA256' '62f6c5e0974c08384a7d7f9a6bb0dbf06810e78cee7bfae799d2edf85a1b169f'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_793101-795012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_793101-795012.nc' 'SHA256' '7b87b348675dfe64e4e8d95e38b9565881663bd8b875613b817b15acd3cfea71'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_795101-797012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_795101-797012.nc' 'SHA256' '496768be6752aa97cd6a4a30214b477c916f4d5bfa41b53b704ac07409ce63ff'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_797101-799012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_797101-799012.nc' 'SHA256' 'c6bc07f417d446dcdaaf5f37fd967be2626e4bb63804d1d2b23d960f56fc1e81'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_799101-801012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_799101-801012.nc' 'SHA256' 'fed8e305ecbbacf06fcf603ca59979357b9e652aa9f384a9cebbd16addab9d5e'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_801101-803012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_801101-803012.nc' 'SHA256' '288ac439395a2e649a401c2ff7d11b656abc8c2b3a6e28e73a3da0f15f78105c'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_803101-805012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_803101-805012.nc' 'SHA256' 'c952be57298c4598532709529cb210378eea0ab3f76efeab99c85f5e8e0d82eb'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_805101-807012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_805101-807012.nc' 'SHA256' '1a8a7df0edf9aae9cbcc5e340a1d64a9cf1551b89cac5c1135c4b58b1059035c'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_807101-809012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_807101-809012.nc' 'SHA256' '06d71d54730cb90be27b427d17861e4e845fd280fec6f05ebf215d9057a01b95'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_809101-811012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_809101-811012.nc' 'SHA256' 'db6cd1fbbd5a0fc4b79ee812a1cb69fdc3cf9f51a861f17b937324e12bbbcb83'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_811101-813012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_811101-813012.nc' 'SHA256' 'ec5921a56680307d3098f81c23eb8d630f12c5da99ba7bf2b7727678240799e0'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_813101-815012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_813101-815012.nc' 'SHA256' 'f41d6f63a2ec4c94bedf8d954e2c1559db147a612941351cc3917949dcd6a97a'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_815101-817012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_815101-817012.nc' 'SHA256' '25fd69c6e8a2647b03718fd7f1e07a1d4e7863155c3ce354b5284a4836cd459c'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_817101-819012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_817101-819012.nc' 'SHA256' 'd9f402da1a64b7f3dba67e3099729d19d1a55f4876aafb44d0f837241c5d4a5b'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_819101-821012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_819101-821012.nc' 'SHA256' '02d43200b51a241816e33edf449b862097dce382033ce25e64e05891614d08d2'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_821101-823012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_821101-823012.nc' 'SHA256' '903a04eb8caeb30ddf18e60c0ff5a2d5a839e480af957b29cbab1795b0a0e3f8'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_823101-825012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_823101-825012.nc' 'SHA256' 'c45e20cabb7f79d973caae4b9b8ea891cd6931bdff5b55fe722a302f1c268d06'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_825101-827012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_825101-827012.nc' 'SHA256' 'a8f39f69956cb8fdc54c12ad6395e9cce8003ab40b0140dc80e4cf11d4e0c5c3'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_827101-829012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_827101-829012.nc' 'SHA256' '7873f034713ea2d6db94f370424241a2c8acae19e40d3ea8774813f80e7eb8e8'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_829101-831012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_829101-831012.nc' 'SHA256' 'cdf9872a45317500c61be57e4428767de3a8f039b60582ca29009cbf52280d05'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_831101-833012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_831101-833012.nc' 'SHA256' '63efcc88fe61511745e8a0e62e5e3e460b454f048e6ec36aeb89c4c7e4a080fb'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_833101-835012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_833101-835012.nc' 'SHA256' '0f9b0d27368024d400dc1b74dbec1ed3cc19e1b98e1f9694caff2f3dcc365d34'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_835101-837012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_835101-837012.nc' 'SHA256' '3899a3321957539b8e42258c7a488732eba38688d3592d6b053ff569afd44535'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_837101-839012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_837101-839012.nc' 'SHA256' '45b99b47eaf0008941c61b51b70286cf8f1b30ccdcc5ab81685c3c3b8a1cd026'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_839101-841012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_839101-841012.nc' 'SHA256' 'c5144eee07a1155f27d9200079ea2d249a0c5cbc981abeb977ab820d10644fbf'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_841101-843012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_841101-843012.nc' 'SHA256' 'da148dd4ec1d77fc5468a520659e694232ae5e5dc4dc0ce505cb017d3fbd3d27'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_843101-845012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_843101-845012.nc' 'SHA256' '26eccde1c2bbe98f5d22ade10aded53d6ad974d69bfc77490e2953fd687ed527'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_845101-847012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_845101-847012.nc' 'SHA256' '4db9fd3da47f253a0b9146b0c3aae4ade7d004d90fc7a3e6204c32a5056533bd'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_847101-849012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_847101-849012.nc' 'SHA256' 'd785e5c70d129793f2993cb6bc45aa9f23ee3cdaa00364f87e1b70c58b9b7640'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_849101-851012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_849101-851012.nc' 'SHA256' '52999e344a0d2fddc69d10d7870800ea9dc2d2edaf49f51c247131890385e81d'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_851101-853012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_851101-853012.nc' 'SHA256' '880908cfa3472bcb3d11520b9a16e469f5c38ff20815ef319c94da2a61a80b7d'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_853101-855012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_853101-855012.nc' 'SHA256' '4d0792de38ac1516ed0a6d3ffa9689b1f480d9d0412c50301993f69ab2c17952'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_855101-857012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_855101-857012.nc' 'SHA256' '264ed975e87a5237fbd0a5315c485242e3a1d9d365322983392c8eb373b30e23'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_857101-859012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_857101-859012.nc' 'SHA256' '170213b01235505a58a47b05b27811a8325b10cb0f78b66c80b4ad0b9e6f6077'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_859101-861012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_859101-861012.nc' 'SHA256' 'ab6c909f82710c8caa5d61153c35ed39eac52dadfc24a38eb24980168019166a'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_861101-863012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_861101-863012.nc' 'SHA256' '53e07c451d4f4a985e7de081b91b1245b65cba3af1578170457749ebebb15791'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_863101-865012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_863101-865012.nc' 'SHA256' 'c677c771b830f45b6855d6a2922432a8b2f78cd16e61c0ad66ac22ba07ed10a7'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_865101-867012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_865101-867012.nc' 'SHA256' 'ecd6ec395cfe91320c988d64a982b7ef776178c9eae8334cca5e9f1f9d3930b5'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_867101-869012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_867101-869012.nc' 'SHA256' 'b5b4267eb921318c56fa6ff37816a3d8be114f2b182a99be2a2b25d8dcc51276'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_869101-871012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_869101-871012.nc' 'SHA256' '03d525666029e9970e06c3dab12b844b30a29ed48b787a8c4dea35f6ec675911'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_871101-873012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_871101-873012.nc' 'SHA256' '80612521b91656a883897b5c9f03102a4f72823175b16e5eca7b8363392af177'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_873101-875012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_873101-875012.nc' 'SHA256' '0448bbd85131c836b8ae1b2fa093569d1472a808bcffa93c6d4e63371311a3e8'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_875101-877012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_875101-877012.nc' 'SHA256' 'c23a9c8975c968088d39c429f2cabb019149befc4421e638488a7379c8730bdc'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_877101-879012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_877101-879012.nc' 'SHA256' 'c89cd8265e192f0a54797bc642bc414d3fb6e4844120e05eb9f411c34533e973'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_879101-881012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_879101-881012.nc' 'SHA256' 'bb0d0529d8afb8c561270a9a975afd8d388190e376c0893485b72da924a73209'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_881101-883012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_881101-883012.nc' 'SHA256' '65f2efc14ce6f77c7a15e77440170b8aa0dd7b2513631212d18ddb877bfdf49f'
'pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_883101-885012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/PMIP/MPI-M/MPI-ESM1-2-LR/past2k/r1i1p1f1/Amon/pr/gn/v20210714/pr_Amon_MPI-ESM1-2-LR_past2k_r1i1p1f1_gn_883101-885012.nc' 'SHA256' 'b1e0fe64d1732d983d638a8c30bbf55d85b136df63ee7330cce0013683d628e1'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 93 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
